#include <iostream>
#include <vector>
#include "math.h"

using namespace std;


/*
Условие задачи:

Динамическое программирование
Реализовать задачу о треугольнике. Натуральные числа выстроены в треугольник. Разработать
программу для поиска наименьшей возможной суммы при спуске от вершины треугольника к его
основанию. Разрешенные перемещения: вниз прямо, вниз влево, вниз вправо. Вывести оптимальный
маршрут.
*/


/*
Динамическое программирование - это метод решения задач, который основан на разбиении сложной
задачи на более простые подзадачи и сохранении результатов этих подзадач для повторного использования.
Этот метод позволяет оптимизировать время и ресурсы решения задачи, так как избегает повторного
вычисления уже известных результатов.
*/


/*
// Вывод треугольника
for (int i = 0; i < n; i++)
{
	for (int j = 0; j <= i; j++)
	{
		cout << dp[i][j] << " ";
	}
	cout << endl;
}

// Заполнение треугольника числами
	int n;
	std::cout << "Введите размер треугольника: ";
	cin >> n;
	vector<vector<int>> triangle(n);
	std::cout << "Введите числа треугольника:" << endl;
	for (int i = 0; i < n; i++)
	{
		triangle[i].resize(i + 1);
		for (int j = 0; j <= i; j++)
		{
			cin >> triangle[i][j];
		}
	}
*/


int main()
{
	// Устанавливаем локаль для корректного вывода на русском языке
	setlocale(LC_ALL, "RUS");

	// Создаем двумерный вектор для хранения треугольника
	vector<vector<int>> triangle =
	{
		  {1},
		  {2, 3},
		  {4, 5, -2},
		  {3, 0, 7, 4},
		  {-2, 5, 3, 2, 1}
	};

	// Определяем размер треугольника
	int n = 5; // Переменная для определения размера треугольника (size * size)

	// Создаем двумерный вектор для хранения динамической таблицы
	vector<vector<int>> dp(n, vector<int>(n));

	// Инициализируем последнюю строку динамической таблицы значениями из треугольника
	for (int i = 0; i < n; i++)
	{
		dp[n - 1][i] = triangle[n - 1][i];
	}

	// Заполняем динамическую таблицу снизу вверх
	for (int i = n - 2; i >= 0; i--)
	{
		for (int j = 0; j <= i; j++)
		{
			if (j == 0) // Если j == 0 следовательно мы не можем рассмотреть ход (влево вверх или вправо вниз)
			{
				// Заполняем ячейку таблицы суммой текущего элемента треугольника и минимальной 
				// суммой из двух соседних ячеек в строке ниже
				dp[i][j] = triangle[i][j] + min(dp[i + 1][j], dp[i + 1][j + 1]);
			}
			else // можем выполнить три хода (вниз влево, вниз прямо, вниз вправо)
			{
				dp[i][j] = triangle[i][j] + min(min(dp[i + 1][j], dp[i + 1][j + 1]), dp[i + 1][j - 1]);
			}
		}
	}

	// Выводим наименьшую возможную сумму пути
	std::cout << "Наименьшая возможная сумма: " << dp[0][0] << endl;

	// Выводим путь с минимальной суммой
	int i = 0, j = 0;
	cout << "Путь с минимальной суммой: " << triangle[i][j] << " ";
	while (i < n - 1) // До размера треугольника отсчет с нуля
	{
		if (j == 0) // Мы можем передвигаться только вниз прямо и вниз вправо
		{
			if (dp[i + 1][j] < dp[i + 1][j + 1]) // если вниз прямо меньше чем вниз вправо
			{
				i++;
			}
			else
			{
				i++;
				j++;
			}
		}
		else // Если j != 0 соответственно мы находимся не у стенки и можем передвигаться в 3-х направлениях (вниз вправо, вниз прямо, вниз влево)
		{
			if (dp[i + 1][j] < min(dp[i + 1][j + 1], dp[i + 1][j - 1])) // Если вниз прямо меньше, чем вниз вправо и вниз влево
			{
				i++;
			}
			else if (dp[i + 1][j + 1] < min(dp[i + 1][j], dp[i + 1][j - 1])) // Если вниз вправо меньше, чем вниз прямо и вниз влево
			{
				i++;
				j++;
			}
			else  // Если вниз вниз влево меньше, чем вниз прямо и вниз влево
			{
				i++;
				j--;
			}
		}
		cout << triangle[i][j] << " "; // Выводим найденное значение
	}
	cout << endl;

	return 0;
}